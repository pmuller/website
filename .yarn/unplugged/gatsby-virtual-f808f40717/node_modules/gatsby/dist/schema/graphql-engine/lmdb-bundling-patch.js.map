{"version":3,"sources":["../../../src/schema/graphql-engine/lmdb-bundling-patch.ts"],"names":["source","lmdbBinaryLocation","lmdbRequire","require","resolve","nodeGypBuild","path","dirname","replace","e","JSON","stringify"],"mappings":";;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEe,kBAAUA,MAAV,EAAkC;AAC/C,MAAIC,kBAAJ;;AACA,MAAI;AACF,UAAMC,WAAW,GAAG,4CAAsBC,OAAO,CAACC,OAAR,CAAiB,MAAjB,CAAtB,CAApB;AACA,UAAMC,YAAY,GAAGH,WAAW,CAAE,gBAAF,CAAhC;;AACA,UAAMI,IAAI,GAAGH,OAAO,CAAE,MAAF,CAApB;;AAEAF,IAAAA,kBAAkB,GAAGI,YAAY,CAACC,IAAb,CACnBA,IAAI,CAACC,OAAL,CAAaJ,OAAO,CAACC,OAAR,CAAiB,MAAjB,CAAb,EAAsCI,OAAtC,CAA+C,OAA/C,EAAwD,EAAxD,CADmB,CAArB;AAGD,GARD,CAQE,OAAOC,CAAP,EAAU;AACV,WAAOT,MAAP;AACD;;AAED,SAAOA,MAAM,CACVQ,OADI,CAEF,sCAFE,EAGF,WAAUE,IAAI,CAACC,SAAL,CAAeV,kBAAf,CAAmC,GAH3C,EAKJO,OALI,CAMF,sCANE,EAOF,qCAPE,EASJA,OATI,CAUH,+WAVG,EAWF,sDAXE,CAAP;AAaD","sourcesContent":["import { createRequireFromPath } from \"gatsby-core-utils\"\n\n// This is hacky webpack loader that does string replacements to\n// allow lmdb@2 to be bundled by webpack for engines.\n// Currently `@vercel/webpack-asset-relocator-loader doesn't handle\n// the way lmdb is loading binaries and dictionary file\n// (can't statically analyze it). So we perform few localized changes\n// and we replace dynamic values with hardcoded ones to allow\n// asset-relocator to pick those assets up and handle them.\n//\n// Because lmdb code can diverge, we also pin version in gatsby\n// dependencies and will have manually bump it (with renovate most likely).\n//\n// To solve this upstream few things would need to change:\n//  - https://github.com/DoctorEvidence/lmdb-js/blob/544b3fda402f24a70a0e946921e4c9134c5adf85/node-index.js#L14-L16\n//  - https://github.com/DoctorEvidence/lmdb-js/blob/544b3fda402f24a70a0e946921e4c9134c5adf85/open.js#L77\n// Reliance on `import.meta.url` + usage of `.replace` is what seems to cause problems currently.\n\nexport default function (source: string): string {\n  let lmdbBinaryLocation\n  try {\n    const lmdbRequire = createRequireFromPath(require.resolve(`lmdb`))\n    const nodeGypBuild = lmdbRequire(`node-gyp-build`)\n    const path = require(`path`)\n\n    lmdbBinaryLocation = nodeGypBuild.path(\n      path.dirname(require.resolve(`lmdb`)).replace(`/dist`, ``)\n    )\n  } catch (e) {\n    return source\n  }\n\n  return source\n    .replace(\n      `require$1('node-gyp-build')(dirName)`,\n      `require(${JSON.stringify(lmdbBinaryLocation)})`\n    )\n    .replace(\n      `require$2.resolve('./dict/dict.txt')`,\n      `require.resolve('../dict/dict.txt')`\n    )\n    .replace(\n      /fs\\.readFileSync\\(new URL\\('\\.\\/dict\\/dict\\.txt',\\s*\\(typeof\\s*document\\s*===\\s*'undefined'\\s*\\?\\s*new\\s*\\(require\\('u'\\s*\\+\\s*'rl'\\)\\.URL\\)\\s*\\('file:'\\s*\\+\\s*__filename\\).href\\s*:\\s*\\(document\\.currentScript\\s*&&\\s*document\\.currentScript\\.src\\s*\\|\\|\\s*new URL\\('index\\.cjs',\\s*document\\.baseURI\\)\\.href\\)\\)\\.replace\\(\\/dist\\[\\\\\\\\\\\\\\/\\]index\\.cjs\\$\\/,\\s*''\\)\\)\\)/g,\n      `fs.readFileSync(require.resolve('../dict/dict.txt'))`\n    )\n}\n"],"file":"lmdb-bundling-patch.js"}